{#
/**
 * @file
 * Default theme implementation to display an oEmbed resource in an iframe.
 *
 * @ingroup themeable
 */
#}
<!DOCTYPE html>
<html>
  <head>
    <style>
      iframe {
        position: absolute;
        left: 0;
        top: 0;
        right: 0;
        bottom: 0;
        margin: 0;
        width: 100%;
        height: 100%;
      }
    </style>
    <script src="//youtube.com/player_api"></script>
    <script src="//player.vimeo.com/api/player.js"></script>
    <script>

      function ready(fn) {
        if (document.readyState != 'loading'){
          fn();
        } else if (document.addEventListener) {
          document.addEventListener('DOMContentLoaded', fn);
        } else {
          document.attachEvent('onreadystatechange', function() {
            if (document.readyState != 'loading')
              fn();
          });
        }
      }

      ready(function() {
        var media_iframe = document.querySelector('iframe');
        media_iframe.setAttribute('id', 'media-oembed-iframe');

        var player_confgured = false;
        var youtube_player;
        var vimeo_player;
  
        function actionProcessor(evt) {

          // Manage Youtube video.
          if (evt.data === "play_youtube") {
            var youtube_iframe = document.querySelector('iframe[src*="youtube.com"]');
            if (youtube_iframe !== undefined && youtube_iframe.src !== undefined) {
              
              if (!player_confgured) {
                var youtubeURL = String(youtube_iframe.src);
                youtubeURL = youtubeURL.replace(/autoplay=0/gi, "autoplay=1");
                youtubeURL = youtubeURL.replace(/controls=0/gi, "controls=1");
                youtubeURL = youtubeURL + "&enablejsapi=1";
                youtube_iframe.src = youtubeURL;
                youtubeURL = undefined; 

                youtube_player = new YT.Player(youtube_iframe.id, {
                  events: {
                    'onReady': onPlayerReady,
                    'onStateChange': onPlayerStateChange
                  }
                });
          
                function onPlayerReady(event) {
                  event.target.playVideo();
                }

                function onPlayerStateChange(event) {

                  if (event.data === YT.PlayerState.PLAYING) {
                    youtube_player.isPlaying = true;
                  }
                  else {
                    youtube_player.isPlaying = false;
                  }

                  if (event.data === YT.PlayerState.ENDED) {
                    window.parent.postMessage("ended_youtube", "*");
                    youtube_player.playVideo();
                  }
                }

                player_confgured = true;
              }

            }
          }
          else if (evt.data === "pause_youtube") {
            if (player_confgured) {
              youtube_player.pauseVideo();
            }
          }

          // Manage Vimeo video.
          else if (evt.data === "play_vimeo") {
            if (!player_confgured) {
              var vimeo_iframe = document.querySelector('iframe[src*="vimeo.com"]');
              vimeo_player = new Vimeo.Player(vimeo_iframe);
              vimeo_player.on('ended', function() {
                window.parent.postMessage("ended_vimeo", "*");
                vimeo_player.play();
              });
              player_confgured = true;
            }

             vimeo_player.ready().then(function() {
               vimeo_player.getPaused().then(function(paused) {
                if (paused) {
                  vimeo_player.play();
                }
              });
            });
          }
          else if (evt.data === "pause_vimeo") {
            if (player_confgured) {
              vimeo_player.pause();
            }
          }
        }

        // Setup the event listener for messaging.
        if (window.addEventListener) {
          window.addEventListener("message", actionProcessor, false);
        }
        else {
          window.attachEvent("onmessage", actionProcessor);
        }
      });
    </script>
  </head>
  <body style="margin: 0">
    {{ media|raw }}
  </body>
</html>
